{"code":"import { signProfileToken, wrapProfileToken, connectToGaiaHub, makeProfileZoneFile, } from 'blockstack';\r\nimport { uploadToGaiaHub } from './utils/gaia';\r\nconst PERSON_TYPE = 'Person';\r\nconst CONTEXT = 'http://schema.org';\r\nconst IMAGE_TYPE = 'ImageObject';\r\nexport const DEFAULT_PROFILE = {\r\n    '@type': 'Person',\r\n    '@context': 'http://schema.org',\r\n};\r\nconst DEFAULT_PROFILE_FILE_NAME = 'profile.json';\r\nexport var Subdomains;\r\n(function (Subdomains) {\r\n    Subdomains[\"TEST\"] = \"test-personal.id\";\r\n    Subdomains[\"BLOCKSTACK\"] = \"id.blockstack\";\r\n})(Subdomains || (Subdomains = {}));\r\nexport const registrars = {\r\n    [Subdomains.TEST]: {\r\n        registerUrl: 'https://test-registrar.blockstack.org/register',\r\n        apiUrl: 'https://test-registrar.blockstack.org/v1/names',\r\n    },\r\n    [Subdomains.BLOCKSTACK]: {\r\n        registerUrl: 'https://registrar.blockstack.org/register',\r\n        apiUrl: 'https://registrar.blockstack.org/v1/names',\r\n    },\r\n};\r\nexport function signProfileForUpload(profile, keypair) {\r\n    const privateKey = keypair.key;\r\n    const publicKey = keypair.keyID;\r\n    const token = signProfileToken(profile, privateKey, { publicKey });\r\n    const tokenRecord = wrapProfileToken(token);\r\n    const tokenRecords = [tokenRecord];\r\n    return JSON.stringify(tokenRecords, null, 2);\r\n}\r\nexport async function uploadProfile(gaiaHubUrl, identity, signedProfileTokenData, gaiaHubConfig) {\r\n    const identityHubConfig = gaiaHubConfig || (await connectToGaiaHub(gaiaHubUrl, identity.keyPair.key));\r\n    const uploadResponse = await uploadToGaiaHub(DEFAULT_PROFILE_FILE_NAME, signedProfileTokenData, identityHubConfig);\r\n    return uploadResponse;\r\n}\r\nconst sendUsernameToRegistrar = async ({ username, subdomain, zoneFile, identity, }) => {\r\n    const { registerUrl } = registrars[subdomain];\r\n    const registrationRequestBody = JSON.stringify({\r\n        name: username,\r\n        owner_address: identity.address,\r\n        zonefile: zoneFile,\r\n    });\r\n    const requestHeaders = {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    };\r\n    const response = await fetch(registerUrl, {\r\n        method: 'POST',\r\n        headers: requestHeaders,\r\n        body: registrationRequestBody,\r\n    });\r\n    if (!response.ok) {\r\n        return Promise.reject({\r\n            error: 'Failed to register username',\r\n            status: response.status,\r\n        });\r\n    }\r\n    return response.json();\r\n};\r\n/**\r\n * Register a subdomain for a given identity\r\n */\r\nexport const registerSubdomain = async ({ identity, gaiaHubUrl, username, subdomain, }) => {\r\n    const profile = identity.profile || DEFAULT_PROFILE;\r\n    const signedProfileTokenData = signProfileForUpload(profile, identity.keyPair);\r\n    const profileUrl = await uploadProfile(gaiaHubUrl, identity, signedProfileTokenData);\r\n    const fullUsername = `${username}.${subdomain}`;\r\n    const zoneFile = makeProfileZoneFile(fullUsername, profileUrl);\r\n    await sendUsernameToRegistrar({\r\n        username,\r\n        subdomain,\r\n        zoneFile,\r\n        identity,\r\n    });\r\n    identity.defaultUsername = fullUsername;\r\n    identity.usernames.push(fullUsername);\r\n    return identity;\r\n};\r\nexport const signAndUploadProfile = async ({ profile, gaiaHubUrl, identity, gaiaHubConfig, }) => {\r\n    const signedProfileTokenData = signProfileForUpload(profile, identity.keyPair);\r\n    await uploadProfile(gaiaHubUrl, identity, signedProfileTokenData, gaiaHubConfig);\r\n};\r\nexport const fetchProfile = async ({ identity, gaiaUrl, }) => {\r\n    try {\r\n        const url = await identity.profileUrl(gaiaUrl);\r\n        const res = await fetch(url);\r\n        if (res.ok) {\r\n            const json = await res.json();\r\n            const { decodedToken } = json[0];\r\n            return decodedToken.payload?.claim;\r\n        }\r\n        if (res.status === 404) {\r\n            return null;\r\n        }\r\n        throw new Error('Network error when fetching profile');\r\n    }\r\n    catch (error) {\r\n        return null;\r\n    }\r\n};\r\n//# sourceMappingURL=profiles.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/index.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/gaia.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/identity.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/storage/hub.d.ts"],"map":"{\"version\":3,\"file\":\"profiles.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/profiles.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/profiles.d.ts","writeByteOrderMark":false,"text":"import { IdentityKeyPair } from './utils';\r\nimport Identity from './identity';\r\nimport { GaiaHubConfig } from 'blockstack/lib/storage/hub';\r\ndeclare const PERSON_TYPE = \"Person\";\r\ndeclare const CONTEXT = \"http://schema.org\";\r\ndeclare const IMAGE_TYPE = \"ImageObject\";\r\nexport interface ProfileImage {\r\n    '@type': typeof IMAGE_TYPE;\r\n    name: string;\r\n    contentUrl: string;\r\n}\r\nexport interface Profile {\r\n    '@type': typeof PERSON_TYPE;\r\n    '@context': typeof CONTEXT;\r\n    apps?: {\r\n        [origin: string]: string;\r\n    };\r\n    appsMeta?: {\r\n        [origin: string]: {\r\n            publicKey: string;\r\n            storage: string;\r\n        };\r\n    };\r\n    name?: string;\r\n    image?: ProfileImage[];\r\n    [key: string]: any;\r\n}\r\nexport declare const DEFAULT_PROFILE: Profile;\r\nexport declare enum Subdomains {\r\n    TEST = \"test-personal.id\",\r\n    BLOCKSTACK = \"id.blockstack\"\r\n}\r\nexport declare const registrars: {\r\n    \"test-personal.id\": {\r\n        registerUrl: string;\r\n        apiUrl: string;\r\n    };\r\n    \"id.blockstack\": {\r\n        registerUrl: string;\r\n        apiUrl: string;\r\n    };\r\n};\r\nexport declare function signProfileForUpload(profile: Profile, keypair: IdentityKeyPair): string;\r\nexport declare function uploadProfile(gaiaHubUrl: string, identity: Identity, signedProfileTokenData: string, gaiaHubConfig?: GaiaHubConfig): Promise<string>;\r\ninterface RegisterParams {\r\n    identity: Identity;\r\n    /** The gaia hub URL to use for profile.json upload */\r\n    gaiaHubUrl: string;\r\n    /** The username portion of this subdomain, i.e. only the portion of the name before any periods */\r\n    username: string;\r\n    /** The \"domain\" used for this subdomain. Can be any of the `Subdomains` enum. */\r\n    subdomain: Subdomains;\r\n}\r\n/**\r\n * Register a subdomain for a given identity\r\n */\r\nexport declare const registerSubdomain: ({ identity, gaiaHubUrl, username, subdomain, }: RegisterParams) => Promise<Identity>;\r\nexport declare const signAndUploadProfile: ({ profile, gaiaHubUrl, identity, gaiaHubConfig, }: {\r\n    profile: Profile;\r\n    gaiaHubUrl: string;\r\n    identity: Identity;\r\n    gaiaHubConfig?: GaiaHubConfig | undefined;\r\n}) => Promise<void>;\r\nexport declare const fetchProfile: ({ identity, gaiaUrl, }: {\r\n    identity: Identity;\r\n    gaiaUrl: string;\r\n}) => Promise<Profile | null>;\r\nexport {};\r\n"}}
