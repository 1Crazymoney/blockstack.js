{"code":"import { makeContractCall, makeContractDeploy, StacksTestnet, makeSTXTokenTransfer, getAddressFromPrivateKey, } from '@blockstack/stacks-transactions';\r\nimport { bip32 } from 'bitcoinjs-lib';\r\nimport { assertIsTruthy } from '../utils';\r\nimport BN from 'bn.js';\r\nexport class WalletSigner {\r\n    constructor({ privateKey }) {\r\n        this.privateKey = privateKey;\r\n    }\r\n    getSTXAddress(version) {\r\n        return getAddressFromPrivateKey(this.getSTXPrivateKey(), version);\r\n    }\r\n    getSTXPrivateKey() {\r\n        const node = bip32.fromBase58(this.privateKey);\r\n        assertIsTruthy(node.privateKey);\r\n        return node.privateKey;\r\n    }\r\n    getNetwork() {\r\n        const network = new StacksTestnet();\r\n        network.coreApiUrl = 'https://sidecar.staging.blockstack.xyz';\r\n        return network;\r\n    }\r\n    async fetchAccount({ version, rpcClient, }) {\r\n        const address = this.getSTXAddress(version);\r\n        const account = await rpcClient.fetchAccount(address);\r\n        return account;\r\n    }\r\n    async signContractCall({ contractName, contractAddress, functionName, functionArgs, nonce, postConditionMode, postConditions, }) {\r\n        const tx = await makeContractCall({\r\n            contractAddress,\r\n            contractName,\r\n            functionName,\r\n            functionArgs,\r\n            senderKey: this.getSTXPrivateKey().toString('hex'),\r\n            nonce: new BN(nonce),\r\n            network: this.getNetwork(),\r\n            postConditionMode,\r\n            postConditions,\r\n        });\r\n        return tx;\r\n    }\r\n    async signContractDeploy({ contractName, codeBody, nonce, postConditionMode, postConditions, }) {\r\n        const tx = await makeContractDeploy({\r\n            contractName,\r\n            codeBody: codeBody,\r\n            senderKey: this.getSTXPrivateKey().toString('hex'),\r\n            network: this.getNetwork(),\r\n            nonce: new BN(nonce),\r\n            postConditionMode,\r\n            postConditions,\r\n        });\r\n        return tx;\r\n    }\r\n    async signSTXTransfer({ recipient, amount, memo, nonce, postConditionMode, postConditions, }) {\r\n        const tx = await makeSTXTokenTransfer({\r\n            recipient,\r\n            amount: new BN(amount),\r\n            memo,\r\n            senderKey: this.getSTXPrivateKey().toString('hex'),\r\n            network: this.getNetwork(),\r\n            nonce: new BN(nonce),\r\n            postConditionMode,\r\n            postConditions,\r\n        });\r\n        return tx;\r\n    }\r\n}\r\n//# sourceMappingURL=signer.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/@blockstack/stacks-transactions/lib/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/@blockstack/rpc-client/dist/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/node_modules/bitcoinjs-lib/types/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/index.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/@types/bn.js/index.d.ts"],"map":"{\"version\":3,\"file\":\"signer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/wallet/signer.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/wallet/signer.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport { TransactionVersion, ClarityValue, StacksTestnet, PostConditionMode, PostCondition, StacksNetwork } from '@blockstack/stacks-transactions';\r\nimport RPCClient from '@blockstack/rpc-client';\r\ninterface ContractCallOptions {\r\n    contractName: string;\r\n    contractAddress: string;\r\n    functionName: string;\r\n    functionArgs: ClarityValue[];\r\n    version: TransactionVersion;\r\n    nonce: number;\r\n    postConditions?: PostCondition[];\r\n    postConditionMode?: PostConditionMode;\r\n    network?: StacksNetwork;\r\n}\r\ninterface ContractDeployOptions {\r\n    contractName: string;\r\n    codeBody: string;\r\n    version: TransactionVersion;\r\n    nonce: number;\r\n    postConditions?: PostCondition[];\r\n    postConditionMode?: PostConditionMode;\r\n    network?: StacksNetwork;\r\n}\r\ninterface STXTransferOptions {\r\n    recipient: string;\r\n    amount: string;\r\n    memo?: string;\r\n    nonce: number;\r\n    postConditions?: PostCondition[];\r\n    postConditionMode?: PostConditionMode;\r\n    network?: StacksNetwork;\r\n}\r\nexport declare class WalletSigner {\r\n    privateKey: string;\r\n    constructor({ privateKey }: {\r\n        privateKey: string;\r\n    });\r\n    getSTXAddress(version: TransactionVersion): string;\r\n    getSTXPrivateKey(): Buffer;\r\n    getNetwork(): StacksTestnet;\r\n    fetchAccount({ version, rpcClient, }: {\r\n        version: TransactionVersion;\r\n        rpcClient: RPCClient;\r\n    }): Promise<import(\"@blockstack/rpc-client\").Account>;\r\n    signContractCall({ contractName, contractAddress, functionName, functionArgs, nonce, postConditionMode, postConditions, }: ContractCallOptions): Promise<import(\"@blockstack/stacks-transactions\").StacksTransaction>;\r\n    signContractDeploy({ contractName, codeBody, nonce, postConditionMode, postConditions, }: ContractDeployOptions): Promise<import(\"@blockstack/stacks-transactions\").StacksTransaction>;\r\n    signSTXTransfer({ recipient, amount, memo, nonce, postConditionMode, postConditions, }: STXTransferOptions): Promise<import(\"@blockstack/stacks-transactions\").StacksTransaction>;\r\n}\r\nexport {};\r\n"}}
