{"code":"import { TokenSigner } from 'jsontokens';\r\nimport { getPublicKeyFromPrivate } from 'blockstack/lib/keys';\r\nimport { randomBytes } from 'blockstack/lib/encryption/cryptoRandom';\r\nimport { ecPairToAddress, hexStringToECPair } from 'blockstack';\r\nexport const DEFAULT_GAIA_HUB = 'https://gaia.blockstack.org/hub/';\r\nexport const getHubInfo = async (hubUrl) => {\r\n    const response = await fetch(`${hubUrl}/hub_info`);\r\n    const data = await response.json();\r\n    return data;\r\n};\r\nexport const getHubPrefix = async (hubUrl) => {\r\n    const { read_url_prefix } = await getHubInfo(hubUrl);\r\n    return read_url_prefix;\r\n};\r\nexport const makeGaiaAssociationToken = (secretKeyHex, childPublicKeyHex) => {\r\n    const LIFETIME_SECONDS = 365 * 24 * 3600;\r\n    const signerKeyHex = secretKeyHex.slice(0, 64);\r\n    const compressedPublicKeyHex = getPublicKeyFromPrivate(signerKeyHex);\r\n    const salt = randomBytes(16).toString('hex');\r\n    const payload = {\r\n        childToAssociate: childPublicKeyHex,\r\n        iss: compressedPublicKeyHex,\r\n        exp: LIFETIME_SECONDS + new Date().getTime() / 1000,\r\n        iat: Date.now() / 1000,\r\n        salt,\r\n    };\r\n    const tokenSigner = new TokenSigner('ES256K', signerKeyHex);\r\n    const token = tokenSigner.sign(payload);\r\n    return token;\r\n};\r\nexport const connectToGaiaHubWithConfig = ({ hubInfo, privateKey, gaiaHubUrl, }) => {\r\n    const readURL = hubInfo.read_url_prefix;\r\n    const token = makeGaiaAuthToken({ hubInfo, privateKey, gaiaHubUrl });\r\n    const address = ecPairToAddress(hexStringToECPair(privateKey + (privateKey.length === 64 ? '01' : '')));\r\n    return {\r\n        url_prefix: readURL,\r\n        max_file_upload_size_megabytes: 100,\r\n        address,\r\n        token,\r\n        server: gaiaHubUrl,\r\n    };\r\n};\r\n/**\r\n * When you already know the Gaia read URL, make a Gaia config that doesn't have to fetch `/hub_info`\r\n */\r\nexport const makeReadOnlyGaiaConfig = ({ readURL, privateKey, }) => {\r\n    const address = ecPairToAddress(hexStringToECPair(privateKey + (privateKey.length === 64 ? '01' : '')));\r\n    return {\r\n        url_prefix: readURL,\r\n        max_file_upload_size_megabytes: 100,\r\n        address,\r\n        token: 'not_used',\r\n        server: 'not_used',\r\n    };\r\n};\r\nconst makeGaiaAuthToken = ({ hubInfo, privateKey, gaiaHubUrl }) => {\r\n    const challengeText = hubInfo.challenge_text;\r\n    const iss = getPublicKeyFromPrivate(privateKey);\r\n    const salt = randomBytes(16).toString('hex');\r\n    const payload = {\r\n        gaiaHubUrl,\r\n        iss,\r\n        salt,\r\n    };\r\n    if (challengeText) {\r\n        payload.gaiaChallenge = challengeText;\r\n    }\r\n    const token = new TokenSigner('ES256K', privateKey).sign(payload);\r\n    return `v1:${token}`;\r\n};\r\nexport const uploadToGaiaHub = async (filename, contents, hubConfig) => {\r\n    const contentType = 'application/json';\r\n    const response = await fetch(`${hubConfig.server}/store/${hubConfig.address}/${filename}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': contentType,\r\n            Authorization: `bearer ${hubConfig.token}`,\r\n        },\r\n        body: contents,\r\n        referrer: 'no-referrer',\r\n        referrerPolicy: 'no-referrer',\r\n    });\r\n    const { publicURL } = await response.json();\r\n    return publicURL;\r\n};\r\n//# sourceMappingURL=gaia.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/jsontokens/lib/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/keys.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/encryption/cryptoRandom.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/storage/hub.d.ts"],"map":"{\"version\":3,\"file\":\"gaia.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/utils/gaia.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/utils/gaia.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport { GaiaHubConfig } from 'blockstack/lib/storage/hub';\r\nexport declare const DEFAULT_GAIA_HUB = \"https://gaia.blockstack.org/hub/\";\r\ninterface HubInfo {\r\n    challenge_text?: string;\r\n    read_url_prefix: string;\r\n}\r\nexport declare const getHubInfo: (hubUrl: string) => Promise<HubInfo>;\r\nexport declare const getHubPrefix: (hubUrl: string) => Promise<string>;\r\nexport declare const makeGaiaAssociationToken: (secretKeyHex: string, childPublicKeyHex: string) => string;\r\ninterface ConnectToGaiaOptions {\r\n    hubInfo: HubInfo;\r\n    privateKey: string;\r\n    gaiaHubUrl: string;\r\n}\r\nexport declare const connectToGaiaHubWithConfig: ({ hubInfo, privateKey, gaiaHubUrl, }: ConnectToGaiaOptions) => GaiaHubConfig;\r\ninterface ReadOnlyGaiaConfigOptions {\r\n    readURL: string;\r\n    privateKey: string;\r\n}\r\n/**\r\n * When you already know the Gaia read URL, make a Gaia config that doesn't have to fetch `/hub_info`\r\n */\r\nexport declare const makeReadOnlyGaiaConfig: ({ readURL, privateKey, }: ReadOnlyGaiaConfigOptions) => GaiaHubConfig;\r\nexport declare const uploadToGaiaHub: (filename: string, contents: Blob | Buffer | ArrayBufferView | string, hubConfig: GaiaHubConfig) => Promise<string>;\r\nexport {};\r\n"}}
