{"code":"import { bip32, ECPair } from 'bitcoinjs-lib';\r\nimport { getPublicKeyFromPrivate } from 'blockstack/lib/keys';\r\nimport { makeAuthResponse } from 'blockstack/lib/auth/authMessages';\r\nimport { getProfileURLFromZoneFile } from './utils';\r\nimport { makeGaiaAssociationToken, DEFAULT_GAIA_HUB, getHubInfo, connectToGaiaHubWithConfig, } from './utils/gaia';\r\nimport IdentityAddressOwnerNode from './nodes/identity-address-owner-node';\r\nimport { fetchProfile, DEFAULT_PROFILE, signAndUploadProfile } from './profiles';\r\nimport { ecPairToAddress } from 'blockstack';\r\nexport class Identity {\r\n    constructor({ keyPair, address, usernames, defaultUsername, profile, }) {\r\n        this.keyPair = keyPair;\r\n        this.address = address;\r\n        this.usernames = usernames || [];\r\n        this.defaultUsername = defaultUsername;\r\n        this.profile = profile;\r\n    }\r\n    async makeAuthResponse({ appDomain, gaiaUrl, transitPublicKey, scopes = [], stxAddress, }) {\r\n        const appPrivateKey = this.appPrivateKey(appDomain);\r\n        const hubInfo = await getHubInfo(gaiaUrl);\r\n        const profileUrl = await this.profileUrl(hubInfo.read_url_prefix);\r\n        const profile = (await fetchProfile({ identity: this, gaiaUrl: hubInfo.read_url_prefix })) || DEFAULT_PROFILE;\r\n        if (scopes.includes('publish_data')) {\r\n            if (!profile.apps) {\r\n                profile.apps = {};\r\n            }\r\n            const challengeSigner = ECPair.fromPrivateKey(Buffer.from(appPrivateKey, 'hex'));\r\n            const storageUrl = `${hubInfo.read_url_prefix}${ecPairToAddress(challengeSigner)}/`;\r\n            profile.apps[appDomain] = storageUrl;\r\n            if (!profile.appsMeta) {\r\n                profile.appsMeta = {};\r\n            }\r\n            profile.appsMeta[appDomain] = {\r\n                storage: storageUrl,\r\n                publicKey: challengeSigner.publicKey.toString('hex'),\r\n            };\r\n            const gaiaHubConfig = connectToGaiaHubWithConfig({\r\n                hubInfo,\r\n                privateKey: this.keyPair.key,\r\n                gaiaHubUrl: gaiaUrl,\r\n            });\r\n            await signAndUploadProfile({ profile, identity: this, gaiaHubUrl: gaiaUrl, gaiaHubConfig });\r\n        }\r\n        this.profile = profile;\r\n        const compressedAppPublicKey = getPublicKeyFromPrivate(appPrivateKey.slice(0, 64));\r\n        const associationToken = makeGaiaAssociationToken(this.keyPair.key, compressedAppPublicKey);\r\n        return makeAuthResponse(this.keyPair.key, {\r\n            ...(this.profile || {}),\r\n            stxAddress,\r\n        }, this.defaultUsername || '', {\r\n            profileUrl,\r\n        }, undefined, appPrivateKey, undefined, transitPublicKey, gaiaUrl, undefined, associationToken);\r\n    }\r\n    appPrivateKey(appDomain) {\r\n        const { salt, appsNodeKey } = this.keyPair;\r\n        const appsNode = new IdentityAddressOwnerNode(bip32.fromBase58(appsNodeKey), salt);\r\n        return appsNode.getAppPrivateKey(appDomain);\r\n    }\r\n    async profileUrl(gaiaUrl) {\r\n        if (this.defaultUsername) {\r\n            try {\r\n                const url = await getProfileURLFromZoneFile(this.defaultUsername);\r\n                if (url)\r\n                    return url;\r\n            }\r\n            catch (error) {\r\n                if (process.env.NODE_ENV !== 'test') {\r\n                    console.warn('Error fetching profile URL from zone file:', error);\r\n                }\r\n            }\r\n        }\r\n        return `${gaiaUrl}${this.address}/profile.json`;\r\n    }\r\n    async fetchNames() {\r\n        const getNamesUrl = `https://core.blockstack.org/v1/addresses/bitcoin/${this.address}`;\r\n        const res = await fetch(getNamesUrl);\r\n        const data = await res.json();\r\n        const { names } = data;\r\n        return names;\r\n    }\r\n    /**\r\n     * Fetch existing information related to this identity, like username and profile information\r\n     */\r\n    async refresh(opts = { gaiaUrl: DEFAULT_GAIA_HUB }) {\r\n        try {\r\n            const names = await this.fetchNames();\r\n            if (names) {\r\n                if (names[0] && !this.defaultUsername) {\r\n                    this.defaultUsername = names[0];\r\n                }\r\n                names.forEach(name => {\r\n                    const existingIndex = this.usernames.findIndex(u => u === name);\r\n                    if (existingIndex === -1) {\r\n                        this.usernames.push(name);\r\n                    }\r\n                });\r\n            }\r\n            const profile = await fetchProfile({ identity: this, gaiaUrl: opts.gaiaUrl });\r\n            if (profile) {\r\n                this.profile = profile;\r\n            }\r\n            return;\r\n        }\r\n        catch (error) {\r\n            return;\r\n        }\r\n    }\r\n}\r\nexport default Identity;\r\n//# sourceMappingURL=identity.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/node_modules/bitcoinjs-lib/types/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/keys.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/auth/authMessages.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/index.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/index.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/utils/gaia.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/nodes/identity-address-owner-node.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/src/profiles.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/index.d.ts"],"map":"{\"version\":3,\"file\":\"identity.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/identity.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/identity.d.ts","writeByteOrderMark":false,"text":"import { IdentityKeyPair } from './utils/index';\r\nimport { Profile } from './profiles';\r\ninterface IdentityConstructorOptions {\r\n    keyPair: IdentityKeyPair;\r\n    address: string;\r\n    usernames?: string[];\r\n    defaultUsername?: string;\r\n    profile?: Profile;\r\n}\r\ninterface RefreshOptions {\r\n    gaiaUrl: string;\r\n}\r\nexport declare class Identity {\r\n    keyPair: IdentityKeyPair;\r\n    address: string;\r\n    defaultUsername?: string;\r\n    usernames: string[];\r\n    profile?: Profile;\r\n    constructor({ keyPair, address, usernames, defaultUsername, profile, }: IdentityConstructorOptions);\r\n    makeAuthResponse({ appDomain, gaiaUrl, transitPublicKey, scopes, stxAddress, }: {\r\n        appDomain: string;\r\n        gaiaUrl: string;\r\n        transitPublicKey: string;\r\n        scopes?: string[];\r\n        stxAddress?: string;\r\n    }): Promise<string>;\r\n    appPrivateKey(appDomain: string): string;\r\n    profileUrl(gaiaUrl: string): Promise<string>;\r\n    fetchNames(): Promise<string[]>;\r\n    /**\r\n     * Fetch existing information related to this identity, like username and profile information\r\n     */\r\n    refresh(opts?: RefreshOptions): Promise<void>;\r\n}\r\nexport default Identity;\r\n"}}
