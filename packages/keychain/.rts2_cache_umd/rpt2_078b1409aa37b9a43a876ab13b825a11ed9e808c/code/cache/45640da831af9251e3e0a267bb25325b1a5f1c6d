{"code":"import { encryptMnemonic } from 'blockstack/lib/encryption/wallet';\r\n/**\r\n * Encrypt a raw mnemonic phrase to be password protected\r\n * @param phrase - Raw mnemonic phrase\r\n * @param password - Password to encrypt mnemonic with\r\n * @return The encrypted phrase\r\n * */\r\nexport async function encrypt(phrase, password) {\r\n    const result = await encryptMnemonic(phrase, password);\r\n    return result;\r\n}\r\n//# sourceMappingURL=encrypt.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/encryption/wallet.d.ts"],"map":"{\"version\":3,\"file\":\"encrypt.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/encryption/encrypt.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE;;;;;KAKK;AACL,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,MAAc,EAAE,QAAgB;IAC5D,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACvD,OAAO,MAAM,CAAC;AAChB,CAAC\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/encryption/encrypt.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\n/**\r\n * Encrypt a raw mnemonic phrase to be password protected\r\n * @param phrase - Raw mnemonic phrase\r\n * @param password - Password to encrypt mnemonic with\r\n * @return The encrypted phrase\r\n * */\r\nexport declare function encrypt(phrase: string, password: string): Promise<Buffer>;\r\n"}}
