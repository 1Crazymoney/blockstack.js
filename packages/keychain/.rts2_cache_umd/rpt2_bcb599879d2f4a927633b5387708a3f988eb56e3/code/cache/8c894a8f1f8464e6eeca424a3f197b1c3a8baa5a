{"code":"import { decrypt as triplesecDecrypt } from 'triplesec';\r\nimport { decryptMnemonic } from 'blockstack/lib/encryption/wallet';\r\n/**\r\n * Decrypt an encrypted mnemonic phrase with a password.\r\n * Legacy triplesec encrypted payloads are also supported.\r\n * @param data - Buffer or hex-encoded string of the encrypted mnemonic\r\n * @param password - Password for data\r\n * @return the raw mnemonic phrase\r\n */\r\nexport async function decrypt(dataBuffer, password) {\r\n    const result = await decryptMnemonic(dataBuffer, password, triplesecDecrypt);\r\n    return result;\r\n}\r\n//# sourceMappingURL=decrypt.js.map","references":["/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/@types/triplesec/index.d.ts","/Users/Yukan/Desktop/work/blockstack/stacks.js/node_modules/blockstack/lib/encryption/wallet.d.ts"],"map":"{\"version\":3,\"file\":\"decrypt.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/encryption/decrypt.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,IAAI,gBAAgB,EAAE,MAAM,WAAW,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,kCAAkC,CAAC;AAEnE;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,OAAO,CAAC,UAA2B,EAAE,QAAgB;IACzE,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,UAAU,EAAE,QAAQ,EAAE,gBAAgB,CAAC,CAAC;IAC7E,OAAO,MAAM,CAAC;AAChB,CAAC\"}","dts":{"name":"/Users/Yukan/Desktop/work/blockstack/stacks.js/packages/keychain/encryption/decrypt.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\n/**\r\n * Decrypt an encrypted mnemonic phrase with a password.\r\n * Legacy triplesec encrypted payloads are also supported.\r\n * @param data - Buffer or hex-encoded string of the encrypted mnemonic\r\n * @param password - Password for data\r\n * @return the raw mnemonic phrase\r\n */\r\nexport declare function decrypt(dataBuffer: Buffer | string, password: string): Promise<string>;\r\n"}}
